// src/types/email.ts (or your frontend types file)

export interface EmailDocument {
  // Core Identifiers (from Supabase)
  id?: string;                // UUID string from Supabase (this is the primary key of the 'emails' table)
  user_id: string;           // UUID string of the user who owns this email in Supabase

  // Uniqueness & IMAP Identifiers
  unique_identifier: string; // The identifier used for duplication checks (message_id or account-fallback_uid)
  message_id?: string | null;   // Original Message-ID header
  account: string;             // The email account (e.g., user1@example.com) this email was fetched from/belongs to
  fallback_uid?: number | null;// IMAP UID, used if message_id is missing

  // Email Metadata
  folder?: string | null;       // IMAP folder path where the email was found
  category?: string | null;     // Your custom category (e.g., "Interested", "Other")

  // Email Content
  subject?: string | null;
  from_address?: string | null;   // Sender's email address (e.g., "sender@example.com")
  // For 'to', 'cc', 'bcc', Supabase stores them as text arrays (TEXT[]).
  // Your frontend might prefer string arrays or comma-separated strings.
  // Let's assume string arrays for now, as it's cleaner.
  to_addresses?: string[] | null;
  cc_addresses?: string[] | null;
  bcc_addresses?: string[] | null;

  // Timestamps (Supabase returns these as ISO date strings)
  sent_at?: string | null;       // Date the email was sent (from 'Date' header)
  received_at?: string | null;   // Date the email was processed/received by your system (or IMAP internal date)
  created_at?: string;      // Auto-generated by Supabase: when the record was inserted
  updated_at?: string;      // Auto-generated by Supabase: when the record was last updated

  // Email Body
  body_text?: string | null;    // Plain text content of the email
  body_html?: string | null;    // HTML content of the email
}

export interface ApiEmailsResponse {
  emails: EmailDocument[];
  total: number;
  currentPage?: number; // If using pagination
  pageSize?: number;    // If using pagination
  totalPages?: number;  // If using pagination
  accounts?: string[];    // Distinct accounts (as fetched for filters)
  folders?: string[];     // Distinct folders (as fetched for filters) - if you implement this
  // categories?: string[]; // You might also want distinct categories
}

export type ReplyIntent =
  | 'Interested - Request Meeting'
  | 'Interested - Positive Reply'
  | 'Not Interested - Polite Decline'
  | 'Not Interested - Unsubscribe';

// You might also want a type for creating/indexing an email,
// which might not include all fields (e.g., id, created_at, updated_at are DB-generated)
export type CreateEmailPayload = Omit<EmailDocument, 'id' | 'created_at' | 'updated_at' | 'received_at'> & {
  received_at?: string | null; // Optional on creation
};